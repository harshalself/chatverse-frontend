# QA Source API Documentation
# This file contains QA source API paths and schemas to be integrated into the main Swagger documentation

paths:
  # ==========================================
  # QA SOURCE ENDPOINTS
  # ==========================================
  /sources/qa/agent/{agentId}:
    get:
      tags:
        - QA Sources
      summary: Get all QA sources for an agent
      description: Retrieves all QA sources belonging to a specific agent (requires authentication)
      security:
        - bearerAuth: []
      parameters:
        - name: agentId
          in: path
          required: true
          description: Agent ID
          schema:
            type: integer
            example: 1
      responses:
        "200":
          description: QA sources retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AllQASourcesResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Agent not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /sources/qa/{id}:
    get:
      tags:
        - QA Sources
      summary: Get QA source by ID
      description: Retrieves a specific QA source by its ID (requires authentication)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: QA Source ID
          schema:
            type: integer
            example: 1
      responses:
        "200":
          description: QA source retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SingleQASourceResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: QA source not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    put:
      tags:
        - QA Sources
      summary: Update QA source
      description: Updates an existing QA source (requires authentication)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: QA Source ID
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateQASourceDto"
      responses:
        "200":
          description: QA source updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SingleQASourceResponse"
        "400":
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: QA source not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    delete:
      tags:
        - QA Sources
      summary: Delete QA source
      description: Deletes a QA source (soft delete - marks as deleted but doesn't physically remove)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: QA Source ID
          schema:
            type: integer
            example: 1
      responses:
        "200":
          description: QA source deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: QA source not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /sources/qa:
    post:
      tags:
        - QA Sources
      summary: Create QA sources
      description: Creates new QA sources from question-answer pairs (requires authentication)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateQASourceDto"
            examples:
              create_qa_source:
                summary: Create QA sources
                value:
                  agent_id: 1
                  name: "Customer Support FAQ"
                  description: "Frequently asked questions about our service"
                  qa_pairs:
                    - question: "What is the purpose of this chatbot?"
                      answer: "This chatbot is designed to assist users with various tasks and provide intelligent responses based on multiple knowledge sources."
                    - question: "How do I reset my password?"
                      answer: "You can reset your password by clicking the 'Forgot Password' link on the login page."
      responses:
        "201":
          description: QA sources created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AllQASourcesResponse"
        "400":
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

components:
  schemas:
    QAPair:
      type: object
      required:
        - question
        - answer
      properties:
        question:
          type: string
          description: The question text
          example: "What is the purpose of this chatbot?"
        answer:
          type: string
          description: The answer text
          example: "This chatbot helps users interact with AI models to get responses to their questions."

    CreateQASourceDto:
      type: object
      required:
        - agent_id
        - qa_pairs
      properties:
        agent_id:
          type: integer
          description: ID of the agent this QA source belongs to
          example: 1
        name:
          type: string
          description: Name for the QA source (optional, will be auto-generated if not provided)
          example: "Customer Support FAQ"
        description:
          type: string
          description: Description of the QA source
          example: "Frequently asked questions about our service"
        qa_pairs:
          type: array
          items:
            $ref: "#/components/schemas/QAPair"
          description: Array of question-answer pairs
          minItems: 1

    UpdateQASourceDto:
      type: object
      properties:
        question:
          type: string
          description: Updated question text
          example: "What is the purpose of this chatbot?"
        answer:
          type: string
          description: Updated answer text
          example: "This chatbot is designed to assist users with various tasks."

    QASource:
      type: object
      properties:
        id:
          type: integer
          description: Source ID
          example: 1
        agent_id:
          type: integer
          description: Agent ID
          example: 1
        source_type:
          type: string
          description: Type of source (always 'qa' for QA sources)
          example: "qa"
        name:
          type: string
          description: Name of the source
          example: "QA: What is the purpose of this chatbot?..."
        description:
          type: string
          description: Description of the source
          example: "Customer support FAQ"
        status:
          type: string
          description: Processing status
          enum: [pending, processing, completed, failed]
          example: "pending"
        is_embedded:
          type: boolean
          description: Whether the source has been embedded
          example: false
        created_by:
          type: integer
          description: ID of user who created the source
          example: 1
        created_at:
          type: string
          format: date-time
          example: "2025-07-31T14:33:39Z"
        updated_at:
          type: string
          format: date-time
          example: "2025-07-31T14:33:39Z"
        is_deleted:
          type: boolean
          description: Whether the source is deleted
          example: false
        source_id:
          type: integer
          description: Reference to source table
          example: 1
        question:
          type: string
          description: The question text
          example: "What is the purpose of this chatbot?"
        answer:
          type: string
          description: The answer text
          example: "This chatbot is designed to assist users with various tasks."

    SingleQASourceResponse:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/QASource"
        message:
          type: string
          example: "QA source retrieved successfully"

    AllQASourcesResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/QASource"
        message:
          type: string
          example: "QA sources retrieved successfully"
