components:
  schemas:
    User:
      type: object
      required:
        - id
        - name
        - email
        - password
        - created_by
        - created_at
        - is_deleted
      properties:
        id:
          type: integer
          description: User's unique identifier
          example: 1
        name:
          type: string
          description: User's full name
          example: "John Doe"
        email:
          type: string
          format: email
          description: User's email address
          example: "john.doe@example.com"
        password:
          type: string
          description: User's password (hashed)
        phone_number:
          type: string
          description: User's phone number
          example: "+1234567890"
        created_by:
          type: integer
          description: ID of the user who created this account
          example: 1
        created_at:
          type: string
          format: date-time
          description: Account creation timestamp
          example: "2025-07-25T10:30:00.000Z"
        updated_by:
          type: integer
          description: ID of the user who last updated this account
          example: 1
        updated_at:
          type: string
          format: date-time
          description: Account last update timestamp
          example: "2025-07-25T10:30:00.000Z"
        is_deleted:
          type: boolean
          description: Whether the user account is deleted
          example: false
        deleted_by:
          type: integer
          description: ID of the user who deleted this account
        deleted_at:
          type: string
          format: date-time
          description: Account deletion timestamp
    UserRegistrationRequest:
      type: object
      required:
        - name
        - email
        - password
      properties:
        name:
          type: string
          example: "Alice Example"
        email:
          type: string
          format: email
          example: "alice@example.com"
        phone_number:
          type: string
          example: "+1122334455"
        password:
          type: string
          example: "securePassword123"
    UserResponse:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "John Doe"
        email:
          type: string
          example: "john.doe@example.com"
        phone_number:
          type: string
          example: "+1234567890"
        created_by:
          type: integer
          example: 1
        created_at:
          type: string
          format: date-time
          example: "2025-07-25T10:30:00.000Z"
        updated_by:
          type: integer
          example: 1
        updated_at:
          type: string
          format: date-time
          example: "2025-07-25T10:30:00.000Z"
        is_deleted:
          type: boolean
          example: false
        deleted_by:
          type: integer
        deleted_at:
          type: string
          format: date-time
    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: "john.doe@example.com"
        password:
          type: string
          example: "securePassword123"
    LoginResponse:
      type: object
      properties:
        access_token:
          type: string
          example: "eyJhbciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        token_type:
          type: string
          example: "Bearer"
        expires_in:
          type: integer
          example: 3600
    UpdateUserRequest:
      type: object
      properties:
        name:
          type: string
          example: "Jane Doe"
        email:
          type: string
          format: email
          example: "jane.doe@example.com"
        phone_number:
          type: string
          example: "+1987654321"
paths:
  /users/register:
    post:
      tags:
        - Users
      summary: Register a new user
      description: Create a new user account (public endpoint - no authentication required)
      security:
        - {} # No security required
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRegistrationRequest"
            examples:
              new_user:
                summary: New user registration
                value:
                  name: "Alice Example"
                  email: "alice@example.com"
                  phone_number: "+1122334455"
                  password: "securePassword123"
      responses:
        "201":
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "400":
          description: Invalid input data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "409":
          description: User already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /users/login:
    post:
      tags:
        - Users
      summary: User login
      description: Authenticate user and get access token (public endpoint - no authentication required)
      security:
        - {} # No security required
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
            examples:
              login:
                summary: User login
                value:
                  email: "john.doe@example.com"
                  password: "securePassword123"
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResponse"
        "401":
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /users:
    get:
      tags:
        - Users
      summary: Get all users
      description: Retrieve a list of all users (requires authentication)
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/UserResponse"
                  message:
                    type: string
                    example: "Users retrieved successfully"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /users/{id}:
    get:
      tags:
        - Users
      summary: Get user by ID
      description: Retrieve a specific user by their ID (requires authentication)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: integer
            example: 1
      responses:
        "200":
          description: User retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/UserResponse"
                  message:
                    type: string
                    example: "User retrieved successfully"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    put:
      tags:
        - Users
      summary: Update user
      description: Update user information (requires authentication)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUserRequest"
            examples:
              update_user:
                summary: Update user information
                value:
                  name: "Jane Doe"
                  email: "jane.doe@example.com"
                  phone_number: "+1987654321"
      responses:
        "200":
          description: User updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/UserResponse"
                  message:
                    type: string
                    example: "User updated successfully"
        "400":
          description: Invalid input data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    delete:
      tags:
        - Users
      summary: Delete user
      description: Delete a user account (requires authentication)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: integer
            example: 1
      responses:
        "200":
          description: User deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User deleted successfully"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

components:
  schemas:
    User:
      type: object
      required:
        - id
        - name
        - email
        - password
        - created_by
        - created_at
        - is_deleted
      properties:
        id:
          type: integer
          description: User's unique identifier
          example: 1
        name:
          type: string
          description: User's full name
          example: "John Doe"
        email:
          type: string
          format: email
          description: User's email address
          example: "john.doe@example.com"
        password:
          type: string
          description: User's password (hashed)
        phone_number:
          type: string
          description: User's phone number
          example: "+1234567890"
        created_by:
          type: integer
          description: ID of the user who created this account
          example: 1
        created_at:
          type: string
          format: date-time
          description: Account creation timestamp
          example: "2025-07-25T10:30:00.000Z"
        updated_by:
          type: integer
          description: ID of the user who last updated this account
          example: 1
        updated_at:
          type: string
          format: date-time
          description: Account last update timestamp
          example: "2025-07-25T10:30:00.000Z"
        is_deleted:
          type: boolean
          description: Whether the user account is deleted
          example: false
        deleted_by:
          type: integer
          description: ID of the user who deleted this account
        deleted_at:
          type: string
          format: date-time
          description: Account deletion timestamp
