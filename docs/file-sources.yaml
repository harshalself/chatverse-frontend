# File Source API Documentation
# This file contains file source API paths and schemas to be integrated into the main Swagger documentation

paths:
  # ==========================================
  # FILE SOURCE ENDPOINTS
  # ==========================================
  /sources/file:
    post:
      tags:
        - File Sources
      summary: Upload a single file
      description: Uploads a single file as a source for an agent using multipart/form-data (recommended method)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - agent_id
                - name
                - file
              properties:
                agent_id:
                  type: integer
                  description: ID of the agent this file belongs to
                  example: 1
                name:
                  type: string
                  description: Name for the file source (required; comes from sources table)
                  example: "Important Document"
                description:
                  type: string
                  description: Optional description of the file source
                  example: "A critical document for the chatbot"
                file:
                  type: string
                  format: binary
                  description: The file to upload (PDF, TXT, DOC, DOCX - max 10MB)
            encoding:
              file:
                contentType: application/pdf, application/msword, application/vnd.openxmlformats-officedocument.wordprocessingml.document, text/plain
      responses:
        "201":
          description: File uploaded successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SingleFileSourceResponse"
        "400":
          description: Invalid input data, file validation failed, or no file uploaded
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /sources/file/multiple:
    post:
      tags:
        - File Sources
      summary: Upload multiple files at once
      description: Uploads multiple files as sources for an agent using multipart/form-data (recommended method)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - agent_id
                - files
                - names
              properties:
                agent_id:
                  type: integer
                  description: ID of the agent these files belong to
                  example: 1
                files:
                  type: array
                  items:
                    type: string
                    format: binary
                  description: The files to upload (max 10 files, each max 10MB)
                  maxItems: 10
                names:
                  type: array
                  items:
                    type: string
                  description: Names for each file (order matches files array, required; comes from sources table)
                  example: ["Document 1", "Document 2"]
                descriptions:
                  type: array
                  items:
                    type: string
                  description: Optional descriptions for each file (order matches files array)
                  example: ["First document", "Second document"]
            encoding:
              files:
                contentType: application/pdf, application/msword, application/vnd.openxmlformats-officedocument.wordprocessingml.document, text/plain
      responses:
        "201":
          description: Files uploaded successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MultipleFileSourcesResponse"
        "400":
          description: Invalid input data, file validation failed, too many files, or no files uploaded
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /sources/file/agent/{agentId}:
    get:
      tags:
        - File Sources
      summary: Get all file sources for an agent
      description: Retrieves all file sources belonging to a specific agent (requires authentication)
      security:
        - bearerAuth: []
      parameters:
        - name: agentId
          in: path
          required: true
          description: Agent ID
          schema:
            type: integer
            example: 1
      responses:
        "200":
          description: File sources retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AllFileSourcesResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Agent not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /sources/file/{id}:
    get:
      tags:
        - File Sources
      summary: Get file source by ID
      description: Retrieves a specific file source by its ID (requires authentication)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: File Source ID
          schema:
            type: integer
            example: 1
      responses:
        "200":
          description: File source retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SingleFileSourceResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: File source not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    put:
      tags:
        - File Sources
      summary: Update file source
      description: Updates an existing file source (requires authentication)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: File Source ID
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateFileSourceRequest"
            examples:
              update_file_source:
                summary: Update file source
                value:
                  file_url: "https://storage.example.com/users/username/agents/1/files/updated-document.pdf"
                  mime_type: "application/pdf"
                  file_size: 65536
                  text_content: "Updated extracted text content..."
      responses:
        "200":
          description: File source updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SingleFileSourceResponse"
        "400":
          description: Invalid input data or file validation failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: File source not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    delete:
      tags:
        - File Sources
      summary: Delete file source
      description: Deletes a file source (requires authentication)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: File Source ID
          schema:
            type: integer
            example: 1
      responses:
        "200":
          description: File source deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: File source not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

components:
  schemas:
    FileSource:
      type: object
      description: Complete file source with joined source and file_sources table data
      required:
        - id
        - agent_id
        - source_type
        - name
        - status
        - is_embedded
        - created_by
        - created_at
        - updated_at
        - is_deleted
        - source_id
        - file_url
        - file_size
      properties:
        # Fields from sources table
        id:
          type: integer
          description: Source ID (primary key from sources table)
          example: 1
        agent_id:
          type: integer
          description: ID of the agent this source belongs to
          example: 1
        source_type:
          type: string
          description: Type of source (always 'file' for file sources)
          example: "file"
        name:
          type: string
          description: Name of the source
          example: "Important Document"
        description:
          type: string
          nullable: true
          description: Description of the source
          example: "A critical document for the chatbot"
        status:
          type: string
          description: Processing status of the source
          enum: [pending, processing, completed, failed]
          example: "pending"
        is_embedded:
          type: boolean
          description: Whether the source content has been vectorized
          example: false
        created_by:
          type: integer
          description: ID of user who created the source
          example: 1
        created_at:
          type: string
          format: date-time
          description: Creation timestamp
          example: "2025-08-05T14:33:39Z"
        updated_by:
          type: integer
          nullable: true
          description: ID of user who last updated the source
          example: 1
        updated_at:
          type: string
          format: date-time
          description: Last update timestamp
          example: "2025-08-05T14:33:39Z"
        is_deleted:
          type: boolean
          description: Whether the source is soft deleted
          example: false
        deleted_by:
          type: integer
          nullable: true
          description: ID of user who deleted the source
          example: null
        deleted_at:
          type: string
          format: date-time
          nullable: true
          description: Deletion timestamp
          example: null
        # Fields from file_sources table
        source_id:
          type: integer
          description: Reference to the source record (same as id for joined responses)
          example: 1
        file_url:
          type: string
          description: URL path to the uploaded file
          example: "https://storage.example.com/users/username/agents/1/files/1627634819-document1.pdf"
        mime_type:
          type: string
          nullable: true
          description: MIME type of the file
          example: "application/pdf"
        file_size:
          type: integer
          description: Size of the file in bytes
          example: 58924
        text_content:
          type: string
          nullable: true
          description: Extracted text content from the file for search/embedding
          example: "This is the extracted text content from the document..."

    UpdateFileSourceRequest:
      type: object
      properties:
        file_url:
          type: string
          description: Updated URL of the file
          example: "https://storage.example.com/users/username/agents/1/files/updated-document.pdf"
        mime_type:
          type: string
          description: Updated MIME type of the file
          example: "application/pdf"
        file_size:
          type: integer
          description: Updated size of the file in bytes
          example: 65536
        text_content:
          type: string
          description: Updated extracted text content
          example: "Updated text content..."

    SingleFileSourceResponse:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/FileSource"
        message:
          type: string
          example: "File source created successfully from upload"

    AllFileSourcesResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/FileSource"
        message:
          type: string
          example: "File sources retrieved successfully"

    MultipleFileSourcesResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/FileSource"
        message:
          type: string
          example: "Multiple file sources created successfully from upload"

    DeleteResponse:
      type: object
      properties:
        message:
          type: string
          example: "File source deleted successfully"
